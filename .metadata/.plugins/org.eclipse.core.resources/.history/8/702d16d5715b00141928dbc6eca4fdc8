package src.org.micromanager.serialPortHandling;


import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.EmptyBorder;

import java.awt.GridLayout;

import net.miginfocom.swing.MigLayout;

import javax.swing.JLabel;

import src.org.micromanager.plugin.ArdWindow;
import src.org.micromanager.plugin.Constants;
import src.org.micromanager.plugin.ErrorPopup;
import src.org.micromanager.plugin.ScriptInterfaceWrapper;

import java.awt.event.InputMethodListener;
import java.awt.event.InputMethodEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.HashMap;
import java.util.Observer;
import java.awt.event.ItemListener;
import java.awt.event.ItemEvent;


public class InputMapper extends JFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private JPanel contentPane;
	private JPanel panel;
	JComboBox[] deviceBoxAnal;
	JComboBox[] propertyBoxAnal;
	//JTextField[] deviceFieldAnal = new JTextField[6];
	//JTextField[] propertyFieldAnal = new JTextField[6];
	JTextField[] minValueFieldAnal = new JTextField[6];
	JTextField[] maxValueFieldAnal = new JTextField[6];
	
	
	JComboBox[] methodBoxDig;
	JComboBox[] deviceGroupBoxDig;
	JComboBox[] propChanBoxDig;
	JTextField[] valueFieldDig;
	JTextField[] smValueFieldDig;
	JTextField[] medValueFieldDig;
	JTextField[] bigValueFieldDig;
	JLabel[] lblDig;
	
	JButton[] okBtnAnal = new JButton[6];
	private final String BTNSTRINGOK = "OK";
	private final String BTNSTRINCHANGE = "Back";
	
	
	HashMap<Integer,String[]> map;
	
	private static final int FIRSTBLOCKSTART = 2;
	private static final int SECONDBLOCKSTART = 10;

	public InputMapper() {
		map = new HashMap<Integer,String[]>();
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 657, 502);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(new GridLayout(0, 1, 0, 0));
		
		panel = new JPanel();
		contentPane.add(panel);
		panel.setLayout(new MigLayout("", "[][82.00,grow][grow][][]", "[grow][24.00][24.00][24.00][24.00][24.00][24.00][24.00][24.00][24.00][][24.00][24.00][24.00][24.00][24.00][24.00][24.00][24.00]"));
		
		
		/**
		 * Analog Part Initialization
		 */
		JLabel lblDeviceName = new JLabel("Device-Name");
		panel.add(lblDeviceName, "cell 1 1");
		
		JLabel lblPropName = new JLabel("Property-Name");
		panel.add(lblPropName, "cell 2 1");
		
		JLabel lblMinVal = new JLabel("Minimum Value");
		panel.add(lblMinVal, "cell 3 1");
		
		JLabel lblMaxVal = new JLabel("Maximum Value");
		panel.add(lblMaxVal, "cell 4 1");
		
		JLabel lblA5 = new JLabel("A5");
		panel.add(lblA5, "cell 0 "+FIRSTBLOCKSTART+",alignx trailing");
		
		JLabel lblA4 = new JLabel("A4");
		panel.add(lblA4, "cell 0 "+(FIRSTBLOCKSTART+1)+",alignx trailing");
		
		JLabel lblA3 = new JLabel("A3");
		panel.add(lblA3, "cell 0 "+(FIRSTBLOCKSTART+2)+",alignx trailing");
		
		JLabel lblA2 = new JLabel("A2");
		panel.add(lblA2, "cell 0 "+(FIRSTBLOCKSTART+3)+",alignx trailing");
		
		JLabel lblA1 = new JLabel("A1");
		panel.add(lblA1, "cell 0 "+(FIRSTBLOCKSTART+4)+",alignx trailing");
		
		JLabel lblA0 = new JLabel("A0");
		panel.add(lblA0, "cell 0 "+(FIRSTBLOCKSTART+5)+",alignx trailing");
		
		// Doesnt Work because of buggy Core_ functions in scriptinterfacewrapper
		String[] deviceNames;
		try {
			deviceNames = ScriptInterfaceWrapper.getDeviceNames();
		} catch (Exception e) {
			deviceNames = new String[]{};
		}
		deviceBoxAnal = new JComboBox[6];
		propertyBoxAnal = new JComboBox[6];
		for(int i = 0; i< deviceBoxAnal.length; i++){
			propertyBoxAnal[i] = new JComboBox();
			deviceBoxAnal[i] = new JComboBox(deviceNames);
			int rownumber = (i*-1)+deviceBoxAnal.length+1;
			deviceBoxAnal[i].addItemListener(new ItemListener() {
				public void itemStateChanged(ItemEvent item) {
					JComboBox box = (JComboBox)item.getSource();
					String device = (String)box.getSelectedItem();
					String[] props;
					try {
						props = ScriptInterfaceWrapper.getDeviceNumberPropertyNames(device);
					} catch (Exception e) {
						props = new String[]{};
					}
					int index = 0;
					for(int j = 0; j < deviceBoxAnal.length; j++){
						if(box.equals(deviceBoxAnal[j])){
							index = j;
						}
					}
					//todo filter non number properties out of props
					int rownumber = (index*-1)+propertyBoxAnal.length+1;
					panel.remove(propertyBoxAnal[index]);
					propertyBoxAnal[index] = new JComboBox(props);
					panel.add(propertyBoxAnal[index], "cell 2 "+rownumber+",growx");
					propertyBoxAnal[index].setVisible(true);
					panel.setSize(panel.getSize());
					panel.repaint();
				}
			});
			panel.add(deviceBoxAnal[i], "cell 1 "+rownumber+",growx");
			panel.add(propertyBoxAnal[i], "cell 2 "+rownumber+",growx");
		}
		
		
		
		try {
			String[] array = ScriptInterfaceWrapper.getDeviceNames();
			for(int i = 0; i< array.length;i++){
				ArdWindow.println(array[i]);
			}
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		for(int i = 0; i< minValueFieldAnal.length; i++){
			minValueFieldAnal[i] = new JTextField();
			maxValueFieldAnal[i] = new JTextField();
			okBtnAnal[i] = new JButton(BTNSTRINGOK);
			
			okBtnAnal[i].addMouseListener(new MouseAdapter() {
				@Override
				public void mouseClicked(MouseEvent arg0){
					int index = arrayGetIndex(okBtnAnal, arg0.getSource());
					String device = (String)deviceBoxAnal[index].getSelectedItem();
					String prop = (String)propertyBoxAnal[index].getSelectedItem();
					
					/**
					 * Exception handling below
					 * Careful MM is case sensitive
					 */
					String minV = minValueFieldAnal[index].getText();
					String maxV = maxValueFieldAnal[index].getText();
					boolean isAProperty = ScriptInterfaceWrapper.isAProperty(device, prop);
					boolean isAValidProperty = ScriptInterfaceWrapper.propertyTypeIsANumber(device, prop);
					boolean minVGood = true;
					boolean maxVGood = true;
					boolean maxMinNumbers = true;
					double minVal = -1;
					double maxVal = -1;
					try {
						minVGood = Integer.parseInt(minV) >= ScriptInterfaceWrapper.propertyMinValue(device, prop);
						maxVGood = Integer.parseInt(maxV) <= ScriptInterfaceWrapper.propertyMaxValue(device, prop);
						minVal = ScriptInterfaceWrapper.propertyMinValue(device, prop);
						maxVal = ScriptInterfaceWrapper.propertyMaxValue(device, prop);
						minVal = (int)Math.floor(minVal*100);
						minVal /= 100;
						maxVal = (int)Math.floor(maxVal*100);
						maxVal /= 100;
					} catch (NumberFormatException e) {
						maxMinNumbers = false;
						e.printStackTrace();
					} catch (Exception e) {
						minVGood = true;
						maxVGood = true;
					}
					/**
					 * If you want to reenable the textfields and change something
					 */
					if(okBtnAnal[index].getText().equals(BTNSTRINCHANGE)){

						deviceBoxAnal[index].setEnabled(true);
						propertyBoxAnal[index].setEnabled(true);
						maxValueFieldAnal[index].setEnabled(true);
						minValueFieldAnal[index].setEnabled(true);
						okBtnAnal[index].setText(BTNSTRINGOK);
					}
					else if(!(isAProperty && isAValidProperty && minVGood && maxVGood && maxMinNumbers)){
						String message = "Something went wrong: "+"\n \n";
						message += isAProperty?"":"-Your property does not exist "+"\n";
						message += isAValidProperty?"":"-Your property is not valid for an analog input "+"\n";
						message += minVGood?"":"-This minimal value cannot be lower than " + minVal + "\n";
						message += maxVGood?"":"-This maximum value cannot be higher that " + maxVal + "\n";
						message += maxMinNumbers?"":"-Please enter numbers for the maximum and minimum value "+"\n";
						message += "\n"+" Thank You!";
						ErrorPopup error = new ErrorPopup(message);
						error.setVisible(true);
					}
					/**
					 * Exception handling done
					 * -> What happens when you actually press OK successfully
					 */
					else{
						map.put(index+10, new String[]{"6",device,prop,minV,maxV});
						deviceBoxAnal[index].setEnabled(false);
						propertyBoxAnal[index].setEnabled(false);
						maxValueFieldAnal[index].setEnabled(false);
						minValueFieldAnal[index].setEnabled(false);
						okBtnAnal[index].setText(BTNSTRINCHANGE);
					}
				}
			});
			int rownumber = (i*-1)+okBtnAnal.length+1;
			panel.add(minValueFieldAnal[i], "cell 3 "+rownumber+",growx");
			panel.add(maxValueFieldAnal[i], "cell 4 "+rownumber+",growx");
			panel.add(okBtnAnal[i], "cell 5 "+rownumber+",growx");
		}
		
		/**
		 * Pin Part Initialization
		 */
		
		JLabel[] pinLbl = new JLabel[Constants.PINNUMBER];
		for(int i = 0; i <pinLbl.length; i++){
			pinLbl[i] = new JLabel("Pin" + i);
			int rownumber = (i*-1) + pinLbl.length +SECONDBLOCKSTART;
			panel.add(pinLbl[i], "cell 0 "+ rownumber);
		}
		
		//TODO
		/**
		 * Digial Initialization
		 */
		methodBoxDig = new JComboBox[Constants.PINNUMBER];
		for(int i = 0; i < methodBoxDig.length; i++){
			String[] methodBoxDigString = new String[]{"Function", "Certain Channel" , "Channel+" , "Channel-", "Certain Prop" , "Prop Step" };
			methodBoxDig[i] = new JComboBox(methodBoxDigString);
			int rownumber = (i*-1) + Constants.PINNUMBER +SECONDBLOCKSTART;
			methodBoxDig[i].addItemListener(new ItemListener(){
				public void itemStateChanged(ItemEvent item){
					JComboBox box = (JComboBox)item.getSource();
					String function = (String)box.getSelectedItem();
					int index = 0;
					for(int j = 0; j < methodBoxDig.length; j++){
						if(box.equals(methodBoxDig[j])){
							index = j;
						}
					}
					groupBoxDig[index].setVisible(false);
					groupBoxDig[index].setEnabled(false);
					deviceGroupBoxDig[index].setVisible(false);
					deviceGroupBoxDig[index].setEnabled(false);
					propChanBoxDig[index].setVisible(false);
					propChanBoxDig[index].setEnabled(false);
					channelBoxDig[index].setVisible(false);
					channelBoxDig[index].setEnabled(false);
					valueFieldDig[index].setVisible(false);
					valueFieldDig[index].setEnabled(false);
					smValueFieldDig[index].setVisible(false);
					smValueFieldDig[index].setEnabled(false);
					medValueFieldDig[index].setVisible(false);
					medValueFieldDig[index].setEnabled(false);
					bigValueFieldDig[index].setVisible(false);
					bigValueFieldDig[index].setEnabled(false);
					
					if(function.equals("Function")){
						
					}
					if(function.equals("Certain Channel")){
						groupBoxDig[index].setVisible(true);
						groupBoxDig[index].setEnabled(true);
						channelBoxDig[index].setVisible(true);
						channelBoxDig[index].setEnabled(true);
					}
					if(function.equals("Channel+")){
						groupBoxDig[index].setVisible(true);
						groupBoxDig[index].setEnabled(true);
					}
					if(function.equals("Channel-")){
						groupBoxDig[index].setVisible(true);
						groupBoxDig[index].setEnabled(true);
					}
					if(function.equals("Certain Prop")){
						deviceGroupBoxDig[index].setVisible(true);
						deviceGroupBoxDig[index].setEnabled(true);
						propChanBoxDig[index].setVisible(true);
						propChanBoxDig[index].setEnabled(true);
						valueFieldDig[index].setVisible(true);
						valueFieldDig[index].setEnabled(true);
					}
					if(function.equals("Prop Step")){
						deviceGroupBoxDig[index].setVisible(true);
						deviceGroupBoxDig[index].setEnabled(true);
						propChanBoxDig[index].setVisible(true);
						propChanBoxDig[index].setEnabled(true);
						smValueFieldDig[index].setVisible(true);
						smValueFieldDig[index].setEnabled(true);
						medValueFieldDig[index].setVisible(true);
						medValueFieldDig[index].setEnabled(true);
						bigValueFieldDig[index].setVisible(true);
						bigValueFieldDig[index].setEnabled(true);
					}
				}
			});
			panel.add(methodBoxDig[i], "cell 1 "+ rownumber+",growx");
		}
		groupBoxDig = new JComboBox[Constants.PINNUMBER];
		for(int i = 0; i < groupBoxDig.length; i++){
			groupBoxDig[i] = new JComboBox();
			int rownumber = (i*-1) + Constants.PINNUMBER +SECONDBLOCKSTART;
			groupBoxDig[i].addItemListener(new ItemListener() {
				public void itemStateChanged(ItemEvent item) {
					JComboBox box = (JComboBox)item.getSource();
					String group = (String)box.getSelectedItem();
					String[] configs;
					try {
						configs = ScriptInterfaceWrapper.getGroupChannelNames(group);
					} catch (Exception e) {
						configs = new String[]{};
					}
					int index = 0;
					for(int j = 0; j < groupBoxDig.length; j++){
						if(box.equals(groupBoxDig[j])){
							index = j;
						}
					}
					//todo filter non number properties out of props
					int rownumber = (index*-1)+channelBoxDig.length+SECONDBLOCKSTART;
					panel.remove(channelBoxDig[index]);
					channelBoxDig[index] = new JComboBox(configs);
					panel.add(channelBoxDig[index], "cell 3 "+rownumber+",growx");
					channelBoxDig[index].setVisible(true);
					panel.setSize(panel.getSize());
					panel.repaint();
				}
			});
			panel.add(groupBoxDig[i], "cell 2 "+ rownumber+",growx");
			groupBoxDig[i].setVisible(false);
		}
		deviceGroupBoxDig = new JComboBox[Constants.PINNUMBER];
		for(int i = 0; i < Constants.PINNUMBER; i++){
			try {
				deviceGroupBoxDig[i] = new JComboBox(ScriptInterfaceWrapper.getDeviceNames());
			} catch (Exception e1) {
				deviceGroupBoxDig[i] = new JComboBox();
			}
			int rownumber = (i*-1) + Constants.PINNUMBER +SECONDBLOCKSTART;
			deviceGroupBoxDig[i].addItemListener(new ItemListener() {
				public void itemStateChanged(ItemEvent item) {
					JComboBox box = (JComboBox)item.getSource();
					String deviceORgroup = (String)box.getSelectedItem();
					String[] propORchannel;
					int index = 0;
					for(int j = 0; j < deviceGroupBoxDig.length; j++){
						if(box.equals(deviceGroupBoxDig[j])){
							index = j;
						}
					}
					String selectedMethod = (String)methodBoxDig[index].getSelectedItem();
					if(selectedMethod.equals("Certain Prop") || selectedMethod.equals("Prop Step")){
						try {
							propORchannel = ScriptInterfaceWrapper.getDevicePropertyNames(deviceORgroup);
						} catch (Exception e) {
							propORchannel = new String[]{};
						}
					}
					else{
						try{
							propORchannel = ScriptInterfaceWrapper.getGroupChannelNames(deviceORgroup);
						}
						catch(Exception e){
							propORchannel = new String[]{};
						}
					}
					//todo filter non number properties out of props
					int rownumber = (index*-1)+propChanBoxDig.length+SECONDBLOCKSTART;
					panel.remove(propChanBoxDig[index]);
					propChanBoxDig[index] = new JComboBox(propORchannel);
					panel.add(propChanBoxDig[index], "cell 3 "+rownumber+",growx");
					propChanBoxDig[index].setVisible(true);
					panel.setSize(panel.getSize());
					panel.repaint();
				}
			});
			panel.add(deviceGroupBoxDig[i], "cell 2 "+ rownumber+",growx");
			deviceGroupBoxDig[i].setVisible(false);
			deviceGroupBoxDig[i].setEnabled(false);
		}
		propChanBoxDig = new JComboBox[Constants.PINNUMBER];
		for(int i = 0; i < Constants.PINNUMBER; i++){
			propChanBoxDig[i] = new JComboBox();
			int rownumber = (i*-1) + Constants.PINNUMBER +SECONDBLOCKSTART;
			panel.add(propChanBoxDig[i], "cell 3 "+ rownumber+",growx");
			propChanBoxDig[i].setVisible(false);
			propChanBoxDig[i].setEnabled(false);
		}
		channelBoxDig = new JComboBox[Constants.PINNUMBER];
		for(int i = 0; i < Constants.PINNUMBER; i++){
			channelBoxDig[i] = new JComboBox();
			int rownumber = (i*-1) + Constants.PINNUMBER +SECONDBLOCKSTART;
			panel.add(channelBoxDig[i], "cell 3 "+ rownumber+",growx");
			channelBoxDig[i].setVisible(false);
			channelBoxDig[i].setEnabled(false);
		}
		valueFieldDig = new JTextField[Constants.PINNUMBER];
		for(int i = 0; i < Constants.PINNUMBER; i++){
			valueFieldDig[i] = new JTextField();
			int rownumber = (i*-1) + Constants.PINNUMBER +SECONDBLOCKSTART;
			panel.add(valueFieldDig[i], "cell 4 "+ rownumber+",growx");
			valueFieldDig[i].setVisible(false);
			valueFieldDig[i].setEnabled(false);
		}
		smValueFieldDig = new JTextField[Constants.PINNUMBER];
		for(int i = 0; i < Constants.PINNUMBER; i++){
			smValueFieldDig[i] = new JTextField();
			int rownumber = (i*-1) + Constants.PINNUMBER +SECONDBLOCKSTART;
			panel.add(smValueFieldDig[i], "cell 4 "+ rownumber+",growx");
			smValueFieldDig[i].setVisible(false);
			smValueFieldDig[i].setEnabled(false);
		}
		medValueFieldDig = new JTextField[Constants.PINNUMBER];
		for(int i = 0; i < Constants.PINNUMBER; i++){
			medValueFieldDig[i] = new JTextField();
			int rownumber = (i*-1) + Constants.PINNUMBER +SECONDBLOCKSTART;
			panel.add(medValueFieldDig[i], "cell 5 "+ rownumber+",growx");
			medValueFieldDig[i].setVisible(false);
			medValueFieldDig[i].setEnabled(false);
		}
		bigValueFieldDig = new JTextField[Constants.PINNUMBER];
		for(int i = 0; i < Constants.PINNUMBER; i++){
			bigValueFieldDig[i] = new JTextField();
			int rownumber = (i*-1) + Constants.PINNUMBER +SECONDBLOCKSTART;
			panel.add(bigValueFieldDig[i], "cell 6 "+ rownumber+",growx");
			bigValueFieldDig[i].setVisible(false);
			bigValueFieldDig[i].setEnabled(false);
		}
		lblDig = new JLabel[6];
		lblDig[0] = new JLabel("Method");
		lblDig[1] = new JLabel("Device/Group");
		lblDig[2] = new JLabel("Property/Channel");
		lblDig[3] = new JLabel("(small) Value");
		lblDig[4] = new JLabel("med Value");
		lblDig[5] = new JLabel("big Value");
		for(int i = 0; i < lblDig.length; i++){
			panel.add(lblDig[i], "cell "+(i+1)+" "+(SECONDBLOCKSTART-1));
		}
		
	}
	
	public HashMap<Integer,String[]> returnMappings(){
		return map;
	}
	
	private int arrayGetIndex(Object[] array, Object object){
		for(int i = 0; i< array.length; i++){
			if( array[i].equals(object)){
				return i;
			}
		}
		return -1;
	}
}
