package src.org.micromanager.plugin.serialPortHandling;

import src.org.micromanager.plugin.*;
import mmcorej.CMMCore;

import org.micromanager.api.ScriptInterface;

import java.util.HashMap;
import java.util.Observable;
import java.util.Observer;


public class Connecter implements Observer {


	private CMMCore core_;
	private ScriptInterface gui_;
	private SerialReader serialReader;
	private HashMap<Integer, String[]> mappings;
	private MicroManagerPlugin microManager;
	
	
	public static final int FUNCTION = 0;
	public static final int CERTAINCHANNEL = 1;
	public static final int CHANNELPLUS = 2;
	public static final int CHANNELMINUS = 3;
	public static final int CERTAINPROP = 4;
	public static final int PROPUP = 5;
	public static final int PROPDOWN = 6;
	public static final int PROPDYNAMIC = 7;
	   
	   
	public Connecter(ScriptInterface app){
		gui_ = app;
	    core_ = app.getMMCore();
	    
	    //TODO Open Mapping
	    InputMapper mapper = new InputMapper();
	    
	    /**
	     * Map works like this:
	     * Integer is the Number of the input device: 0 - 13 -> 0 - 9 
	     * -- 13:LED BigSteps , 12: LED MedSteps , 11:LED SmallSteps, 10:StepsBtn
	     * WhichStep: 10 -> 10
	     * StepSizes: 11 - 13 -> 11 - 13
	     * A0 - A5 -> 14 - 19
	     * 
	     * String Array: 
	     * 0: 0Function / 1CertainChannel / 2Channel+ / 3Channel - / 4CertainProp / 5PropUp / 6PropDown / 7PropDynamic
	     * Function: 1 Function
	     * CertainChannel: 1 GroupName 2 ChannelName
	     * Channel +/-: 1 GroupName
	     * CertainProp: 1 DeviceName(label) 2 PropertyName 3 Value
	     * PropUp/Down: 1 DeviceName(label) 2 PropertyName 3 SmallValue 4 MedValue 5 BigValue
	     * PropDynamic: 1 DeviceName(label) 2 PropertyName 3 Value
	     */
	    mappings = mapper.returnMappings();
	}

	@Override
	public void update(Observable object, Object signal) {
		//if you get a signal convert it with the hashmap
		int commandInt = -1;
		try{
			commandInt = Integer.parseInt(mappings.get(signal)[0]);
		}
		catch(Exception e){
			e.printStackTrace();
			System.out.println("Didnt manage to parse String to Int in Connecter.update");
		}
		String[] args = mappings.get(signal);
		switch(commandInt){
		
		//TODO These Cases
		
			case -1:
				System.out.println("-1");
				break;
			case FUNCTION:
				
				break;
			case CERTAINCHANNEL:
				microManager.setConfig(args[1], args[2]);
				break;
			case CHANNELPLUS:
				microManager.goUpConfig(args[1]);
				break;
			case CHANNELMINUS:
				microManager.goDownConfig(args[1]);
				break;
			case CERTAINPROP:
				microManager.setProperty(args[1], args[2], args[3]);
				break;
			case PROPUP:
				
				break;
			case PROPDOWN:
				break;
			case PROPDYNAMIC:
				break;
		}
		
		
	}
}
