package src.org.micromanager.plugin.serialPortHandling;

import mmcorej.CMMCore;

import org.micromanager.api.ScriptInterface;

import java.util.HashMap;
import java.util.Observable;
import java.util.Observer;


public class Connecter implements Observer {


	private CMMCore core_;
	private ScriptInterface gui_;
	private SerialReader serialReader;
	private HashMap<Integer, String[]> mappings;
	
	final int FUNCTION = 0;
	final int CERTAINCHANNEL = 1;
	final int CHANNELPLUS = 2;
	final int CHANNELMINUS = 3;
	final int CERTAINPROP = 4;
	final int PROPUP = 5;
	final int PROPDOWN = 6;
	final int PROPDYNAMIC = 7;
	   
	   
	public Connecter(ScriptInterface app){
		gui_ = app;
	    core_ = app.getMMCore();
	    
	    //TODO Open Mapping
	    InputMapper mapper = new InputMapper();
	    
	    /**
	     * Map works like this:
	     * Integer is the Number of the input device: 0 - 13 -> 0 - 9 
	     * -- 13:LED BigSteps , 12: LED MedSteps , 11:LED SmallSteps, 10:StepsBtn
	     * A0 - A5 -> 10 - 15
	     * 
	     * String Array: 
	     * 0: 0Function / 1CertainChannel / 2Channel+ / 3Channel - / 4CertainProp / 5PropUp / 6PropDown / 7PropDynamic
	     * Function: 1 Function
	     * CertainChannel: 1 GroupName 2 ChannelName
	     * Channel +/-: 1 GroupName
	     * CertainProp: 1 DeviceName(label) 2 PropertyName 3 Value
	     * PropUp/Down: 1 DeviceName(label) 2 PropertyName 3 SmallValue 4 MedValue 5 BigValue
	     * PropDynamic: 1 DeviceName(label) 2 PropertyName 3 Value
	     */
	    mappings = mapper.returnMappings();
	}

	@Override
	public void update(Observable object, Object signal) {
		//if you get a signal convert it with the hashmap
		switch(mappings.get(signal)[0]){
		
		}
		
		
	}
}
