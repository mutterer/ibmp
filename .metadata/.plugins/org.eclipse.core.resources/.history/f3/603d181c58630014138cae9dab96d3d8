package src.org.micromanager.serialPortHandling;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.EmptyBorder;

import java.awt.GridLayout;

import net.miginfocom.swing.MigLayout;

import javax.swing.JLabel;

import src.org.micromanager.plugin.ArdWindow;
import src.org.micromanager.plugin.Constants;
import src.org.micromanager.plugin.ErrorPopup;
import src.org.micromanager.plugin.ScriptInterfaceWrapper;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.awt.event.ItemListener;
import java.awt.event.ItemEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

public class InputMapper extends JFrame {

	private static final long serialVersionUID = 1L;
	private JPanel contentPane;
	private JPanel panel;
	ArrayList<JComboBox> deviceBoxAnal;
	ArrayList<JComboBox> propertyBoxAnal;
	ArrayList<JTextField> minValueFieldAnal;
	ArrayList<JTextField> maxValueFieldAnal;
	String[] deviceNames;
	int analogRowNumbers = 0;

	int digitalRowNumbers = 10;
	ArrayList<JComboBox> methodBoxDig;
	ArrayList<JComboBox> deviceGroupFunctionBoxDig;
	ArrayList<JComboBox> propChanBoxDig;
	ArrayList<JTextField> smValueFieldDig;
	ArrayList<JTextField> medValueFieldDig;
	String[] methodBoxDigString = new String[] { "Function",
			"Certain Channel", "Channel+", "Channel-", "Certain Prop",
			"Prop Step" };
	ArrayList<JTextField> bigValueFieldDig;
	ArrayList<JButton> okBtnDig;
	JLabel[] lblDig;
	ArrayList<JLabel> pinLblDig;
	
	JButton saveBtn;
	JButton loadBtn;
	JFileChooser fm = new JFileChooser();

	ArrayList<JButton> okBtnAnal = new ArrayList<JButton>();
	private final String BTNSTRINGOK = "OK";
	private final String BTNSTRINCHANGE = "Back";
	private final String[] functions = new String[] { "Snap", "Live" };

	HashMap<Integer, String[]> map;

	private static final int FIRSTBLOCKSTART = 2;
	private static final int SECONDBLOCKSTART = 10;

	public InputMapper() {
		map = new HashMap<Integer, String[]>();
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 800, 600);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(new GridLayout(0, 1, 0, 0));

		panel = new JPanel();
		contentPane.add(panel);
		panel.setLayout(new MigLayout(
				"",
				"[][82.00,grow][grow][][]",
				"[grow][24.00][24.00][24.00][24.00][24.00][24.00][24.00][24.00][24.00][][24.00][24.00][24.00][24.00][24.00][24.00][24.00][24.00]"));

		saveBtn = new JButton("Save");
		saveBtn.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {
				int value = fm.showSaveDialog(InputMapper.this);
				if(value == JFileChooser.APPROVE_OPTION){
					File file = fm.getSelectedFile();
					FileOutputStream fileOps;
					ObjectOutputStream objObs;
					try {
						fileOps = new FileOutputStream(file);
						objObs = new ObjectOutputStream(fileOps);
						objObs.writeObject(map);
						objObs.close();
					} catch (FileNotFoundException e) {
						ArdWindow.println("This won't happen anyway! If you see this, congratulations to you.");
					} catch (IOException e) {
						ArdWindow.println(e.getMessage());;
					}
					
				}
			}
		});
		panel.add(saveBtn,"cell 7 1");
		saveBtn.setVisible(true);
		
		loadBtn = new JButton("Load");
		loadBtn.addMouseListener(new MouseAdapter() {
			@SuppressWarnings("unchecked")
			@Override
			public void mouseClicked(MouseEvent arg0){
				int value = fm.showSaveDialog(InputMapper.this);
				if(value == JFileChooser.APPROVE_OPTION){
					File file = fm.getSelectedFile();
					FileInputStream fileIps;
					ObjectInputStream objIps;
					try {
						fileIps = new FileInputStream(file);
						objIps = new ObjectInputStream(fileIps);
						map = (HashMap<Integer,String[]>) objIps.readObject();
						//TODO guiToMap();
					} 
					catch(ClassNotFoundException e){
						ErrorPopup error = new ErrorPopup("Invalid or broken file");
						error.setVisible(true);
					}
					catch (Exception e) {
						ArdWindow.println(e.getMessage());;
					} 
				}
			}
		});
		panel.add(loadBtn,"cell 7 2");
		loadBtn.setVisible(true);
		
		/**
		 * Analog Part Initialization
		 */
		JLabel lblDeviceName = new JLabel("Device-Name");
		panel.add(lblDeviceName, "cell 1 1");

		JLabel lblPropName = new JLabel("Property-Name");
		panel.add(lblPropName, "cell 2 1");

		JLabel lblMinVal = new JLabel("Minimum Value");
		panel.add(lblMinVal, "cell 3 1");

		JLabel lblMaxVal = new JLabel("Maximum Value");
		panel.add(lblMaxVal, "cell 4 1");

		JLabel lblA5 = new JLabel("A5");
		panel.add(lblA5, "cell 0 " + FIRSTBLOCKSTART + ",alignx trailing");

		JLabel lblA4 = new JLabel("A4");
		panel.add(lblA4, "cell 0 " + (FIRSTBLOCKSTART + 1) + ",alignx trailing");

		JLabel lblA3 = new JLabel("A3");
		panel.add(lblA3, "cell 0 " + (FIRSTBLOCKSTART + 2) + ",alignx trailing");

		JLabel lblA2 = new JLabel("A2");
		panel.add(lblA2, "cell 0 " + (FIRSTBLOCKSTART + 3) + ",alignx trailing");

		JLabel lblA1 = new JLabel("A1");
		panel.add(lblA1, "cell 0 " + (FIRSTBLOCKSTART + 4) + ",alignx trailing");

		JLabel lblA0 = new JLabel("A0");
		panel.add(lblA0, "cell 0 " + (FIRSTBLOCKSTART + 5) + ",alignx trailing");

		// Doesnt Work because of buggy Core_ functions in
		// scriptinterfacewrapper
		try {
			deviceNames = ScriptInterfaceWrapper.getDeviceNames();
		} catch (Exception e) {
			deviceNames = new String[] {};
		}
		deviceBoxAnal = new ArrayList<JComboBox>();
		propertyBoxAnal = new ArrayList<JComboBox>();
		minValueFieldAnal = new ArrayList<JTextField>();
		maxValueFieldAnal = new ArrayList<JTextField>();
		/**
		 * Pin Part Initialization
		 */

		pinLblDig = new ArrayList<JLabel>();
		

		/**
		 * Digial Initialization
		 */
		methodBoxDig = new ArrayList<JComboBox>();

		deviceGroupFunctionBoxDig = new ArrayList<JComboBox>();
		
		propChanBoxDig = new ArrayList<JComboBox>();
		
		smValueFieldDig = new ArrayList<JTextField>();
		medValueFieldDig = new ArrayList<JTextField>();
		bigValueFieldDig = new ArrayList<JTextField>();
		
		lblDig = new JLabel[6];
		lblDig[0] = new JLabel("Method");
		lblDig[1] = new JLabel("Device/Group");
		lblDig[2] = new JLabel("Property/Channel");
		lblDig[3] = new JLabel("(small) Value");
		lblDig[4] = new JLabel("med Value");
		lblDig[5] = new JLabel("big Value");
		for (int i = 0; i < lblDig.length; i++) {
			panel.add(lblDig[i], "cell " + (i + 1) + " "
					+ (SECONDBLOCKSTART - 1));
		}
		okBtnDig = new ArrayList<JButton>();
		
		addDigitalRow();
		addAnalogRow();
	}
	/*
	/**
	 * this is Arduino Uno specific
	 *
	public void guiToMap(){
		for(int i = 0; i<10; i++){
			deviceGroupFunctionBoxDig[i].setEnabled(false);
			propChanBoxDig[i].setEnabled(false);
			smValueFieldDig[i].setEnabled(false);
			medValueFieldDig[i].setEnabled(false);
			bigValueFieldDig[i].setEnabled(true);
			okBtnDig[i].setText(BTNSTRINGOK);
		}
		for(int i = 0; i <=5; i++){
			deviceBoxAnal[i].setEnabled(true);
			propertyBoxAnal[i].setEnabled(true);
			minValueFieldAnal[i].setEnabled(true);
			maxValueFieldAnal[i].setEnabled(true);
			okBtnAnal[i].setText(BTNSTRINGOK);
		}
		for(Integer key: map.keySet()){
			if(key < 10){
				//digital
				String[] mapString = map.get(key);
				methodBoxDig[key].setSelectedIndex(Integer.parseInt(mapString[0]));
				deviceGroupFunctionBoxDig[key].setVisible(false);
				deviceGroupFunctionBoxDig[key].setEnabled(false);
				propChanBoxDig[key].setVisible(false);
				propChanBoxDig[key].setEnabled(false);
				smValueFieldDig[key].setVisible(false);
				smValueFieldDig[key].setEnabled(false);
				medValueFieldDig[key].setVisible(false);
				medValueFieldDig[key].setEnabled(false);
				bigValueFieldDig[key].setVisible(false);
				bigValueFieldDig[key].setEnabled(false);
				switch(Integer.parseInt(mapString[0])){
					case Constants.CERTAINCHANNEL:
						deviceGroupFunctionBoxDig[key].setVisible(true);
						deviceGroupFunctionBoxDig[key].setEnabled(false);
						deviceGroupFunctionBoxDig[key].setSelectedItem(mapString[1]);
						propChanBoxDig[key].setVisible(true);
						propChanBoxDig[key].setEnabled(false);
						propChanBoxDig[key].setSelectedItem(mapString[2]);
						okBtnDig[key].setText(BTNSTRINCHANGE);
						break;
					case Constants.CERTAINPROP:
						deviceGroupFunctionBoxDig[key].setVisible(true);
						deviceGroupFunctionBoxDig[key].setEnabled(false);
						deviceGroupFunctionBoxDig[key].setSelectedItem(mapString[1]);
						propChanBoxDig[key].setVisible(true);
						propChanBoxDig[key].setEnabled(false);
						propChanBoxDig[key].setSelectedItem(mapString[2]);
						smValueFieldDig[key].setVisible(true);
						smValueFieldDig[key].setEnabled(false);
						smValueFieldDig[key].setText(mapString[3]);						
						okBtnDig[key].setText(BTNSTRINCHANGE);
						break;
					case Constants.CHANNELMINUS:
						deviceGroupFunctionBoxDig[key].setVisible(true);
						deviceGroupFunctionBoxDig[key].setEnabled(false);
						deviceGroupFunctionBoxDig[key].setSelectedItem(mapString[1]);					
						okBtnDig[key].setText(BTNSTRINCHANGE);
						break;
					case Constants.CHANNELPLUS:
						deviceGroupFunctionBoxDig[key].setVisible(true);
						deviceGroupFunctionBoxDig[key].setEnabled(false);
						deviceGroupFunctionBoxDig[key].setSelectedItem(mapString[1]);					
						
						break;
					case Constants.FUNCTION:
						deviceGroupFunctionBoxDig[key].setEnabled(false);
						deviceGroupFunctionBoxDig[key].setVisible(true);
						deviceGroupFunctionBoxDig[key].setSelectedItem(mapString[1]);
						break;
					case Constants.PROPSTEP:
						deviceGroupFunctionBoxDig[key].setEnabled(false);
						deviceGroupFunctionBoxDig[key].setSelectedItem(mapString[1]);;
						propChanBoxDig[key].setEnabled(false);
						propChanBoxDig[key].setSelectedItem(mapString[2]);
						smValueFieldDig[key].setEnabled(false);
						smValueFieldDig[key].setText(mapString[3]);
						medValueFieldDig[key].setText(mapString[3]);
						bigValueFieldDig[key].setText(mapString[3]);
						medValueFieldDig[key].setEnabled(false);
						bigValueFieldDig[key].setEnabled(false);
						break;
				}
				okBtnDig[key].setText(BTNSTRINCHANGE);
				methodBoxDig[key].setEnabled(false);
			}
			else if(key <= 15){
				//analog
				String[] mapString = map.get(key);
				deviceBoxAnal[key].setSelectedItem(mapString[1]);
				deviceBoxAnal[key].setEnabled(false);
				propertyBoxAnal[key].setSelectedItem(mapString[2]);
				propertyBoxAnal[key].setEnabled(false);
				minValueFieldAnal[key].setText(mapString[3]);
				maxValueFieldAnal[key].setText(mapString[4]);
				minValueFieldAnal[key].setEnabled(false);
				maxValueFieldAnal[key].setEnabled(false);
				okBtnAnal[key].setText(BTNSTRINCHANGE);
			}
		}
	}*/
	
	private void addAnalogRow(){
		/**
		 *prop und dev box 
		 */
		JComboBox propertyBoxAnali;
		JComboBox deviceBoxAnali;
		propertyBoxAnali = new JComboBox();
		deviceBoxAnali = new JComboBox(deviceNames);
		deviceBoxAnali.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent item) {
				//TODO
				ArdWindow.println("1");
				JComboBox box = (JComboBox) item.getSource();
				String device = (String) box.getSelectedItem();
				String[] props;
				try {
					props = ScriptInterfaceWrapper
							.getDeviceNumberPropertyNames(device);
				} catch (Exception e) {
					props = new String[] {};
				}
				int index = deviceBoxAnal.indexOf(box);
				//TODO
				ArdWindow.println("2");
				propertyBoxAnal.get(index).setModel(new DefaultComboBoxModel(
						props));
			}
		});
		panel.add(deviceBoxAnali, "cell 1 " + (analogRowNumbers+1) + ",growx");
		panel.add(propertyBoxAnali, "cell 2 " +  (analogRowNumbers+1) + ",growx");
		
		/**
		 * 
		 */
		
		JTextField minValueFieldAnali = new JTextField();
		JTextField maxValueFieldAnali = new JTextField();
		JButton okBtnAnali = new JButton(BTNSTRINGOK);

		
		okBtnAnali.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {
				int index = okBtnAnal.indexOf(arg0.getSource());
				String device = (String) deviceBoxAnal.get(index)
						.getSelectedItem();
				String prop = (String) propertyBoxAnal.get(index)
						.getSelectedItem();

				/**
				 * Exception handling below Careful MM is case sensitive
				 */
				String minV = minValueFieldAnal.get(index).getText();
				String maxV = maxValueFieldAnal.get(index).getText();
				boolean isAProperty = ScriptInterfaceWrapper.isAProperty(
						device, prop);
				boolean isAValidProperty = ScriptInterfaceWrapper
						.propertyTypeIsANumber(device, prop);
				boolean minVGood = true;
				boolean maxVGood = true;
				boolean maxMinNumbers = true;
				double minVal = -1;
				double maxVal = -1;
				try {
					minVGood = Integer.parseInt(minV) >= ScriptInterfaceWrapper
							.propertyMinValue(device, prop);
					maxVGood = Integer.parseInt(maxV) <= ScriptInterfaceWrapper
							.propertyMaxValue(device, prop);
					minVal = ScriptInterfaceWrapper.propertyMinValue(
							device, prop);
					maxVal = ScriptInterfaceWrapper.propertyMaxValue(
							device, prop);
					minVal = (int) Math.floor(minVal * 100);
					minVal /= 100;
					maxVal = (int) Math.floor(maxVal * 100);
					maxVal /= 100;
				} catch (NumberFormatException e) {
					maxMinNumbers = false;
					e.printStackTrace();
				} catch (Exception e) {
					minVGood = true;
					maxVGood = true;
				}
				/**
				 * If you want to reenable the textfields and change
				 * something
				 */
				if (okBtnAnal.get(index).getText().equals(BTNSTRINCHANGE)) {

					deviceBoxAnal.get(index).setEnabled(true);
					propertyBoxAnal.get(index).setEnabled(true);
					maxValueFieldAnal.get(index).setEnabled(true);
					minValueFieldAnal.get(index).setEnabled(true);
					okBtnAnal.get(index).setText(BTNSTRINGOK);
					map.put(index + 10, new String[] {});
				} else if (!(isAProperty && isAValidProperty && minVGood
						&& maxVGood && maxMinNumbers)) {
					String message = "Something went wrong: " + "\n \n";
					message += isAProperty ? ""
							: "-Your property does not exist " + "\n";
					message += isAValidProperty ? ""
							: "-Your property is not valid for an analog input "
									+ "\n";
					message += minVGood ? ""
							: "-This minimal value cannot be lower than "
									+ minVal + "\n";
					message += maxVGood ? ""
							: "-This maximum value cannot be higher that "
									+ maxVal + "\n";
					message += maxMinNumbers ? ""
							: "-Please enter numbers for the maximum and minimum value "
									+ "\n";
					message += "\n" + " Thank You!";
					ErrorPopup error = new ErrorPopup(message);
					error.setVisible(true);
				}
				/**
				 * Exception handling done -> What happens when you actually
				 * press OK successfully
				 */
				else {
					map.put(index + 10, new String[] { "6", device, prop,
							minV, maxV });
					deviceBoxAnal.get(index).setEnabled(false);
					propertyBoxAnal.get(index).setEnabled(false);
					maxValueFieldAnal.get(index).setEnabled(false);
					minValueFieldAnal.get(index).setEnabled(false);
					okBtnAnal.get(index).setText(BTNSTRINCHANGE);
					addAnalogRow();
				}
			}
		});
		
		try{
			minValueFieldAnal.add(minValueFieldAnali);
			maxValueFieldAnal.add(maxValueFieldAnali);
		}
		catch(Exception e){
			ArdWindow.println(e.getMessage());
			ArdWindow.print(e.getMessage());
		}
		okBtnAnal.add(okBtnAnali);
		panel.add(minValueFieldAnali, "cell 3 " + (analogRowNumbers+1) + ",growx");
		panel.add(maxValueFieldAnali, "cell 4 " + (analogRowNumbers+1) + ",growx");
		panel.add(okBtnAnali, "cell 5 " + (analogRowNumbers+1) + ",growx");

		analogRowNumbers++;
		panel.repaint();
	}
	
	private void addDigitalRow(){
		
		/**
		 * MethodBox
		 */
		JComboBox methodBoxDigi = new JComboBox(methodBoxDigString);
		methodBoxDig.add(methodBoxDigi);
		methodBoxDigi.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent item) {
				JComboBox box = (JComboBox) item.getSource();
				String method = (String) box.getSelectedItem();
				int index = 0;
				for (int j = 0; j < methodBoxDig.size(); j++) {
					if (box.equals(methodBoxDig.get(j))) {
						index = j;
					}
				}
				try {
					deviceGroupFunctionBoxDig.get(index)
							.setModel(new DefaultComboBoxModel(
									ScriptInterfaceWrapper.getGroupNames()));
				} catch (Exception e) {
					e.printStackTrace();
				}
				deviceGroupFunctionBoxDig.get(index).setVisible(false);
				deviceGroupFunctionBoxDig.get(index).setEnabled(false);
				propChanBoxDig.get(index).setVisible(false);
				propChanBoxDig.get(index).setEnabled(false);
				smValueFieldDig.get(index).setVisible(false);
				smValueFieldDig.get(index).setEnabled(false);
				medValueFieldDig.get(index).setVisible(false);
				medValueFieldDig.get(index).setEnabled(false);
				bigValueFieldDig.get(index).setVisible(false);
				bigValueFieldDig.get(index).setEnabled(false);

				if (method.equals("Function")) {
					deviceGroupFunctionBoxDig.get(index)
							.setModel(new DefaultComboBoxModel(functions));
					deviceGroupFunctionBoxDig.get(index).setVisible(true);
					deviceGroupFunctionBoxDig.get(index).setEnabled(true);
				}
				if (method.equals("Certain Channel")) {
					try {
						String[] groups = ScriptInterfaceWrapper
								.getDeviceNames();
						deviceGroupFunctionBoxDig.get(index)
								.setModel(new DefaultComboBoxModel(groups));
						propChanBoxDig.get(index).setModel(new DefaultComboBoxModel(
								ScriptInterfaceWrapper
										.getGroupChannelNames(groups[0])));
					} catch (Exception e) {
						e.printStackTrace();
					}
					deviceGroupFunctionBoxDig.get(index).setVisible(true);
					deviceGroupFunctionBoxDig.get(index).setEnabled(true);
					propChanBoxDig.get(index).setVisible(true);
					propChanBoxDig.get(index).setEnabled(true);
				}
				if (method.equals("Channel+")) {
					deviceGroupFunctionBoxDig.get(index).setVisible(true);
					deviceGroupFunctionBoxDig.get(index).setEnabled(true);
				}
				if (method.equals("Channel-")) {
					deviceGroupFunctionBoxDig.get(index).setVisible(true);
					deviceGroupFunctionBoxDig.get(index).setEnabled(true);
				}
				if (method.equals("Certain Prop")) {
					try {
						String[] devices = ScriptInterfaceWrapper
								.getDeviceNames();
						deviceGroupFunctionBoxDig.get(index)
								.setModel(new DefaultComboBoxModel(devices));
						propChanBoxDig.get(index).setModel(new DefaultComboBoxModel(
								ScriptInterfaceWrapper
										.getDevicePropertyNames(devices[0])));
					} catch (Exception e) {
						e.printStackTrace();
					}
					deviceGroupFunctionBoxDig.get(index).setVisible(true);
					deviceGroupFunctionBoxDig.get(index).setEnabled(true);
					propChanBoxDig.get(index).setVisible(true);
					propChanBoxDig.get(index).setEnabled(true);
					smValueFieldDig.get(index).setVisible(true);
					smValueFieldDig.get(index).setEnabled(true);
				}
				if (method.equals("Prop Step")) {
					try {
						String[] devices = ScriptInterfaceWrapper
								.getDeviceNames();
						deviceGroupFunctionBoxDig.get(index)
								.setModel(new DefaultComboBoxModel(devices));
						propChanBoxDig.get(index).setModel(new DefaultComboBoxModel(
								ScriptInterfaceWrapper
										.getDeviceNumberPropertyNames(devices[0])));
					} catch (Exception e) {
						e.printStackTrace();
					}
					deviceGroupFunctionBoxDig.get(index).setVisible(true);
					deviceGroupFunctionBoxDig.get(index).setEnabled(true);
					propChanBoxDig.get(index).setVisible(true);
					propChanBoxDig.get(index).setEnabled(true);
					smValueFieldDig.get(index).setVisible(true);
					smValueFieldDig.get(index).setEnabled(true);
					medValueFieldDig.get(index).setVisible(true);
					medValueFieldDig.get(index).setEnabled(true);
					bigValueFieldDig.get(index).setVisible(true);
					bigValueFieldDig.get(index).setEnabled(true);
				}
			}
		});
		panel.add(methodBoxDigi, "cell 1 " + (digitalRowNumbers+1) + ",growx");
		
		/**
		 * 
		 */
		JComboBox deviceGroupFunctionBoxDigi;
		try {
			deviceGroupFunctionBoxDigi = new JComboBox(
					functions);
		} catch (Exception e1) {
			deviceGroupFunctionBoxDigi = new JComboBox();
		}
		deviceGroupFunctionBoxDigi.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent item) {
				JComboBox box = (JComboBox) item.getSource();
				String deviceORgroup = (String) box.getSelectedItem();
				String[] propORchannel;
				int index = 0;
				for (int j = 0; j < deviceGroupFunctionBoxDig.size(); j++) {
					if (box.equals(deviceGroupFunctionBoxDig.get(j))) {
						index = j;
					}
				}
				String selectedMethod = (String) methodBoxDig.get(index)
						.getSelectedItem();
				if (selectedMethod.equals("Certain Prop")
						|| selectedMethod.equals("Prop Step")) {
					try {
						if (selectedMethod.equals("Certain Prop"))
							propORchannel = ScriptInterfaceWrapper
									.getDevicePropertyNames(deviceORgroup);
						else
							propORchannel = ScriptInterfaceWrapper
									.getDeviceNumberPropertyNames(deviceORgroup);
					} catch (Exception e) {
						propORchannel = new String[] {};
					}
				} else {
					try {
						propORchannel = ScriptInterfaceWrapper
								.getGroupChannelNames(deviceORgroup);
					} catch (Exception e) {
						propORchannel = new String[] {};
					}
				}
				propChanBoxDig.get(index).setModel(new DefaultComboBoxModel(
						propORchannel));
			}
		});
		panel.add(deviceGroupFunctionBoxDigi, "cell 2 " + (digitalRowNumbers+1)
				+ ",growx");
		deviceGroupFunctionBoxDig.add(deviceGroupFunctionBoxDigi);
		deviceGroupFunctionBoxDigi.setVisible(true);
		deviceGroupFunctionBoxDigi.setEnabled(true);
		
		
		/**
		 * propchanboxdig
		 */

		JComboBox propChanBoxDigi;
		propChanBoxDigi = new JComboBox();
		panel.add(propChanBoxDigi, "cell 3 " + (digitalRowNumbers+1) + ",growx");
		propChanBoxDig.add(propChanBoxDigi);
		propChanBoxDigi.setVisible(false);
		propChanBoxDigi.setEnabled(false);
		
		/**
		 * textBoxes
		 */
		

		JTextField smValueFieldDigi;
		smValueFieldDigi = new JTextField();
		panel.add(smValueFieldDigi, "cell 4 " + (digitalRowNumbers+1) + ",growx");
		smValueFieldDig.add(smValueFieldDigi);
		smValueFieldDigi.setVisible(false);
		smValueFieldDigi.setEnabled(false);
		
		JTextField medValueFieldDigi;
		medValueFieldDigi = new JTextField();
		panel.add(medValueFieldDigi, "cell 5 " + (digitalRowNumbers+1) + ",growx");
		medValueFieldDig.add(medValueFieldDigi);
		medValueFieldDigi.setVisible(false);
		medValueFieldDigi.setEnabled(false);

		JTextField bigValueFieldDigi;
		bigValueFieldDigi = new JTextField();
		panel.add(bigValueFieldDigi, "cell 6 " + (digitalRowNumbers+1) + ",growx");
		bigValueFieldDig.add(bigValueFieldDigi);
		bigValueFieldDigi.setVisible(false);
		bigValueFieldDigi.setEnabled(false);
		
		/**
		 * BTN
		 */
		JButton okBtnDigi;
		okBtnDigi = new JButton(BTNSTRINGOK);
		okBtnDig.add(okBtnDigi);
		okBtnDigi.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {
				JButton sourceBtn = (JButton) arg0.getSource();
				int index = 0;
				for (int j = 0; j < okBtnDig.size(); j++) {
					if (sourceBtn.equals(okBtnDig.get(j))) {
						index = j;
					}
				}
				ArdWindow.println("" + index);
				if (okBtnDig.get(index).getText().equals(BTNSTRINCHANGE)) {
					okBtnDig.get(index).setText(BTNSTRINGOK);
					okBtnDig.get(index).setEnabled(true);
					okBtnDig.get(index).setVisible(true);
					methodBoxDig.get(index).setEnabled(true);
					deviceGroupFunctionBoxDig.get(index).setEnabled(true);
					propChanBoxDig.get(index).setEnabled(true);
					smValueFieldDig.get(index).setEnabled(true);
					medValueFieldDig.get(index).setEnabled(true);
					bigValueFieldDig.get(index).setEnabled(true);
					map.put(index, new String[] {});
				} else {
					int method = methodBoxDig.get(index).getSelectedIndex();
					boolean valid = true;
					String inputVal = smValueFieldDig.get(index).getText();
					String device = (String) deviceGroupFunctionBoxDig.get(index)
							.getSelectedItem();
					String prop = (String) propChanBoxDig.get(index)
							.getSelectedItem();
					String[] mapString = new String[] {};
					switch (method) {

					case Constants.FUNCTION:
						String function = (String) deviceGroupFunctionBoxDig.get(index)
								.getSelectedItem();
						mapString = new String[] { "" + method, function };
						break;
					case Constants.CERTAINCHANNEL:
						mapString = new String[] { "" + method, device,
								prop };
						break;
					case Constants.CHANNELPLUS:
						mapString = new String[] { "" + method, device };
						break;
					case Constants.CHANNELMINUS:
						mapString = new String[] { "" + method, device };
						break;
					case Constants.CERTAINPROP:
						boolean isANumber = ScriptInterfaceWrapper
								.propertyTypeIsANumber(device, prop);
						try {
							Double.parseDouble(inputVal);
							if (!isANumber) {
								valid = false;
							}
						} catch (Exception e) {
							if (isANumber) {
								valid = false;
							}
						}
						// Special case: Input is a Number but MM doesnt see
						// needed Input as number

						if (!valid) {
							ErrorPopup errorCertProp = new ErrorPopup(
									"Sorry this value is not valid for "
											+ device + "-" + prop + ".");
							errorCertProp.setVisible(true);
						} else {
							mapString = new String[] { "" + method, device,
									prop, inputVal };
						}
						break;
					case Constants.PROPSTEP:
						try {
							Double.parseDouble(smValueFieldDig.get(index)
									.getText());
							Double.parseDouble(medValueFieldDig.get(index)
									.getText());
							Double.parseDouble(bigValueFieldDig.get(index)
									.getText());
						} catch (Exception e) {
							valid = false;
							ErrorPopup errorPropStep = new ErrorPopup(
									"Your step values have to be numbers.");
							errorPropStep.setVisible(true);
						}
						if (valid) {
							mapString = new String[] { "" + method, device,
									prop,
									"" + smValueFieldDig.get(index).getText(),
									"" + medValueFieldDig.get(index).getText(),
									"" + bigValueFieldDig.get(index).getText() };
						}

						break;
					}
					if (valid) {
						map.put(index, mapString);
						okBtnDig.get(index).setText(BTNSTRINCHANGE);
						methodBoxDig.get(index).setEnabled(false);
						deviceGroupFunctionBoxDig.get(index).setEnabled(false);
						propChanBoxDig.get(index).setEnabled(false);
						smValueFieldDig.get(index).setEnabled(false);
						medValueFieldDig.get(index).setEnabled(false);
						bigValueFieldDig.get(index).setEnabled(false);
						addDigitalRow();
					}
				}
			}
		});
		panel.add(okBtnDigi, "cell 7 " + (digitalRowNumbers+1) + ",growx");
		okBtnDigi.setVisible(true);
		
		/**
		 * labels
		 */

		JLabel pinLblDigi;
		pinLblDigi = new JLabel("Digital" + (digitalRowNumbers+1));
		pinLblDig.add(pinLblDigi);
		panel.add(pinLblDigi, "cell 0 " + (digitalRowNumbers+1));
		
		/**
		 * end
		 */
		digitalRowNumbers += 1;
		panel.repaint();
	}

	public HashMap<Integer, String[]> returnMappings() {
		return map;
	}

	private int arrayGetIndex(Object[] array, Object object) {
		for (int i = 0; i < array.length; i++) {
			if (array[i].equals(object)) {
				return i;
			}
		}
		return -1;
	}
}
